name: Test Coverage Enforcement

on:
  pull_request:
    branches:
      - main

jobs:
  coverage-check:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Cache xmlstarlet
      - name: Cache xmlstarlet
        id: cache-xmlstarlet
        uses: actions/cache@v3
        with:
          path: /usr/local/bin/xmlstarlet
          key: ${{ runner.os }}-xmlstarlet-${{ hashFiles('**/*.xml') }}
          restore-keys: |
            ${{ runner.os }}-xmlstarlet-

      # Step 3: Make gradlew executable
      - name: Make gradlew executable
        run: chmod +x ./gradlew

      # Step 4: Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: temurin

      # Step 5: Run the tests and generate reports
      - name: Run coverage check
        id: coverage
        run: |
          # Run the tests and generate reports
          ./gradlew clean test jacocoTestReport jacocoTestCoverageVerification

          # Check if the JaCoCo report exists
          REPORT_PATH="build/reports/jacoco/test/jacocoTestReport.xml"
          if [ ! -f "$REPORT_PATH" ]; then
            echo "❌ JaCoCo report not found at $REPORT_PATH"
            echo "coverage_check_failed=true" >> $GITHUB_ENV
          fi

          # Debug: Output the XML file content for inspection
          echo "Debug: JaCoCo report content"
          cat "$REPORT_PATH"

          # Extract coverage value from the report using xmlstarlet
          COVERAGE=$(xmlstarlet sel -t -v "sum(@covered)" "$REPORT_PATH")
          MISSED=$(xmlstarlet sel -t -v "sum(@missed)" "$REPORT_PATH")
          
          # Calculate total coverage percentage
          TOTAL=$(($COVERAGE + $MISSED))
          if [ "$TOTAL" -eq 0 ]; then
            COVERAGE_PERCENT=0
          else
            COVERAGE_PERCENT=$((($COVERAGE * 100) / $TOTAL))
          fi

          # Set the coverage percentage as an environment variable
          echo "COVERAGE_PERCENT=${COVERAGE_PERCENT}" >> $GITHUB_ENV
          echo "Total line coverage: ${COVERAGE_PERCENT}%"

          # Check if there are any test failures
          if [ $(grep -c "FAILED" build/reports/tests/test/index.html) -gt 0 ]; then
            echo "❌ There are failed tests. Please check the test results."
            echo "tests_failed=true" >> $GITHUB_ENV
          else
            echo "tests_failed=false" >> $GITHUB_ENV
          fi

      # Step 6: Upload the coverage report as an artifact
      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: build/reports/jacoco/test/html/

      # Step 7: Comment on PR with coverage details and test failure status
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const coverage = process.env.COVERAGE_PERCENT;
            let comment = `## JaCoCo Test Coverage Report
            Total Line Coverage: **${coverage}%**

            ${coverage >= 80 
              ? '✅ Coverage meets or exceeds the required 80% threshold. Great job!'
              : '❌ Coverage is below the required 80% threshold. Please add more tests to improve coverage.'}`;

            const testsFailed = process.env.tests_failed === 'true';
            if (testsFailed) {
              comment += '\n\n❌ There are failed tests. Please check the test results.';
            }

            comment += `

            📊 [View detailed coverage report](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });

      # Step 8: Fail the job if there are test failures or coverage below 80%
      - name: Fail the job if there are failed tests or low coverage
        if: env.tests_failed == 'true' || env.COVERAGE_PERCENT < 80
        run: |
          echo "Job failed due to test failures or coverage being below threshold."
          exit 1
