name: Test and Coverage Check

on:
  pull_request:
    branches:
      - main
      - develop

jobs:
  checkout:
    name: Checkout Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

  restore-keys:
    name: Restore keys.properties
    runs-on: ubuntu-latest
    needs: checkout
    steps:
      - name: Restore keys.properties
        run: |
          echo "$KEYS_FILE" | base64 -d > keys.properties
          echo "Decoded keys.properties content:"
          cat keys.properties
          echo "Current directory tree:"
          tree -a -L 2 || ls -R
        env:
          KEYS_FILE: ${{ secrets.KEYS_FILE }}

  build-and-test:
    name: Build and Run Tests
    runs-on: ubuntu-latest
    needs: restore-keys
    outputs:
      test_result: ${{ steps.set_result.outputs.outcome }}
    steps:
      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: temurin

      - name: Run tests
        id: run_tests
        continue-on-error: true
        run: ./gradlew clean test jacocoTestReport

      - name: Set test result output
        id: set_result
        run: echo "outcome=${{ steps.run_tests.outcome }}" >> $GITHUB_OUTPUT

  handle-failures:
    name: Handle Test Failures
    runs-on: ubuntu-latest
    needs: build-and-test
    if: needs.build-and-test.outputs.test_result != 'success'
    steps:
      - name: Comment on failure
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: "❌ **Tests failed. Please fix them before merging.**"
            });
            core.setFailed('Tests failed.')

  check-coverage:
    name: Check Coverage
    runs-on: ubuntu-latest
    needs: build-and-test
    if: needs.build-and-test.outputs.test_result == 'success'
    outputs:
      instruction: ${{ steps.extract.outputs.instruction }}
      line: ${{ steps.extract.outputs.line }}
      method: ${{ steps.extract.outputs.method }}
      class: ${{ steps.extract.outputs.class }}
    steps:
      - name: Install xmllint
        run: sudo apt-get install -y libxml2-utils

      - name: Check coverage thresholds
        id: extract
        run: |
          REPORT_PATH="build/reports/jacoco/test/jacocoTestReport.xml"
          if [ ! -f "$REPORT_PATH" ]; then
            echo "❌ Coverage report not found."
            exit 1
          fi

          extract_coverage() {
            local type=$1
            local covered=$(xmllint --xpath "string(//counter[@type='$type']/@covered)" "$REPORT_PATH")
            local missed=$(xmllint --xpath "string(//counter[@type='$type']/@missed)" "$REPORT_PATH")
            echo $(( (covered * 100) / (covered + missed) ))
          }

          echo "instruction=$(extract_coverage INSTRUCTION)" >> $GITHUB_OUTPUT
          echo "line=$(extract_coverage LINE)" >> $GITHUB_OUTPUT
          echo "method=$(extract_coverage METHOD)" >> $GITHUB_OUTPUT
          echo "class=$(extract_coverage CLASS)" >> $GITHUB_OUTPUT

  comment-coverage:
    name: Comment Coverage Results
    runs-on: ubuntu-latest
    needs: [build-and-test, check-coverage]
    if: needs.build-and-test.outputs.test_result == 'success'
    steps:
      - name: Comment on coverage results
        uses: actions/github-script@v7
        with:
          script: |
            const instruction = Number('${{ needs.check-coverage.outputs.instruction }}');
            const line = Number('${{ needs.check-coverage.outputs.line }}');
            const method = Number('${{ needs.check-coverage.outputs.method }}');
            const classCoverage = Number('${{ needs.check-coverage.outputs.class }}');
            const artifactUrl = `https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}`;

            let message = `
            ## 📊 JaCoCo Coverage Report
            | Metric               | Covered % |
            |----------------------|-----------|
            | Instruction Coverage | ${instruction}% |
            | Line Coverage        | ${line}% |
            | Method Coverage      | ${method}% |
            | Class Coverage       | ${classCoverage}% |

            [🔗 View Detailed Coverage Report](${artifactUrl})
            `;

            if (
              instruction < 80 ||
              line < 80 ||
              method < 80 ||
              classCoverage < 80
            ) {
              message += '\n❌ **Coverage below 80%, please improve it before merging.**';
              core.setFailed('Coverage below 80%');
            } else {
              message += '\n✅ **Coverage meets minimum 80% requirement. Good job!**';
            }

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: message
            });
