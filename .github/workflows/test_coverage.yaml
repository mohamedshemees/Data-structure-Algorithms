name: Test Coverage Enforcement

on:
  pull_request:
    branches:
      - main

jobs:
  coverage-check:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write  # Required for PR comments

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: temurin

      - name: Run tests and generate reports
        id: test_and_coverage
        run: |
          set +e
          ./gradlew clean test jacocoTestReport jacocoTestCoverageVerification
          echo "EXIT_CODE=$?" >> $GITHUB_ENV
          set -e

      - name: Check if tests failed
        if: env.EXIT_CODE != '0'
        uses: actions/github-script@v7
        with:
          script: |
            const message = `
            ## ❌ Test Failure
            Some tests failed. Please fix the issues before we can check coverage.
            `;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: message
            });
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Fail if tests failed
        if: env.EXIT_CODE != '0'
        run: exit 1

      - name: Parse JaCoCo report and set coverage values
        if: env.EXIT_CODE == '0'
        run: |
          sudo apt-get install -y libxml2-utils

          REPORT_PATH="build/reports/jacoco/test/jacocoTestReport.xml"

          if [ ! -f "$REPORT_PATH" ]; then
            echo "❌ JaCoCo report not found!"
            exit 1
          fi

          LINE_COVERED=$(xmllint --xpath "string(//counter[@type='LINE']/@covered)" "$REPORT_PATH")
          LINE_MISSED=$(xmllint --xpath "string(//counter[@type='LINE']/@missed)" "$REPORT_PATH")
          CLASS_COVERED=$(xmllint --xpath "string(//counter[@type='CLASS']/@covered)" "$REPORT_PATH")
          CLASS_MISSED=$(xmllint --xpath "string(//counter[@type='CLASS']/@missed)" "$REPORT_PATH")
          BRANCH_COVERED=$(xmllint --xpath "string(//counter[@type='BRANCH']/@covered)" "$REPORT_PATH")
          BRANCH_MISSED=$(xmllint --xpath "string(//counter[@type='BRANCH']/@missed)" "$REPORT_PATH")

          LINE_COVERAGE_PERCENT=$(( (LINE_COVERED * 100) / (LINE_COVERED + LINE_MISSED) ))
          CLASS_COVERAGE_PERCENT=$(( (CLASS_COVERED * 100) / (CLASS_COVERED + CLASS_MISSED) ))
          BRANCH_COVERAGE_PERCENT=$(( (BRANCH_COVERED * 100) / (BRANCH_COVERED + BRANCH_MISSED) ))

          echo "LINE_COVERAGE_PERCENT=${LINE_COVERAGE_PERCENT}" >> $GITHUB_ENV
          echo "CLASS_COVERAGE_PERCENT=${CLASS_COVERAGE_PERCENT}" >> $GITHUB_ENV
          echo "BRANCH_COVERAGE_PERCENT=${BRANCH_COVERAGE_PERCENT}" >> $GITHUB_ENV

      - name: Comment coverage on PR
        if: env.EXIT_CODE == '0'
        uses: actions/github-script@v7
        with:
          script: |
            const lineCoverage = process.env.LINE_COVERAGE_PERCENT;
            const classCoverage = process.env.CLASS_COVERAGE_PERCENT;
            const branchCoverage = process.env.BRANCH_COVERAGE_PERCENT;

            const meetsThreshold = lineCoverage >= 80 && classCoverage >= 80 && branchCoverage >= 80;

            const comment = `
            ## 📊 JaCoCo Test Coverage Report
            | Metric         | Coverage % |
            |----------------|------------|
            | Line Coverage  | ${lineCoverage}% |
            | Class Coverage | ${classCoverage}% |
            | Branch Coverage| ${branchCoverage}% |

            ${meetsThreshold ? '✅ Coverage meets required 80% threshold!' : '❌ Coverage below 80%, please improve tests.'}

            📋 [View detailed report](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            `;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
          github-token: ${{ secrets.GITHUB_TOKEN }}

