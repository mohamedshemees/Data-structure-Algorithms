name: Test Coverage Enforcement

on:
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Make gradlew executable
      - name: Make gradlew executable
        run: chmod +x ./gradlew

      # Step 3: Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: temurin

      # Step 4: Run tests and generate reports
      - name: Run tests and generate reports
        run: |
          ./gradlew clean test jacocoTestReport jacocoTestCoverageVerification || true # Allow failure for coverage rule

          # Check if JaCoCo report exists
          REPORT_PATH="build/reports/jacoco/test/jacocoTestReport.xml"
          if [ ! -f "$REPORT_PATH" ]; then
            echo "❌ JaCoCo report not found at $REPORT_PATH"
            exit 1
          fi

          # Install xmllint for XML parsing
          sudo apt-get install -y libxml2-utils

          # Extract coverage values using xmllint
          LINE_COVERED=$(xmllint --xpath "string(//counter[@type='LINE']/@covered)" "$REPORT_PATH")
          LINE_MISSED=$(xmllint --xpath "string(//counter[@type='LINE']/@missed)" "$REPORT_PATH")
          INSTRUCTION_COVERED=$(xmllint --xpath "string(//counter[@type='INSTRUCTION']/@covered)" "$REPORT_PATH")
          INSTRUCTION_MISSED=$(xmllint --xpath "string(//counter[@type='INSTRUCTION']/@missed)" "$REPORT_PATH")
          CLASS_COVERED=$(xmllint --xpath "string(//counter[@type='CLASS']/@covered)" "$REPORT_PATH")
          CLASS_MISSED=$(xmllint --xpath "string(//counter[@type='CLASS']/@missed)" "$REPORT_PATH")
          BRANCH_COVERED=$(xmllint --xpath "string(//counter[@type='BRANCH']/@covered)" "$REPORT_PATH")
          BRANCH_MISSED=$(xmllint --xpath "string(//counter[@type='BRANCH']/@missed)" "$REPORT_PATH")

          # Calculate percentages for instructions, lines, classes, and branches
          LINE_COVERAGE_PERCENT=$(( (LINE_COVERED * 100) / (LINE_COVERED + LINE_MISSED) ))
          INSTRUCTION_COVERAGE_PERCENT=$(( (INSTRUCTION_COVERED * 100) / (INSTRUCTION_COVERED + INSTRUCTION_MISSED) ))
          CLASS_COVERAGE_PERCENT=$(( (CLASS_COVERED * 100) / (CLASS_COVERED + CLASS_MISSED) ))
          BRANCH_COVERAGE_PERCENT=$(( (BRANCH_COVERED * 100) / (BRANCH_COVERED + BRANCH_MISSED) ))

          # Display the coverage percentages
          echo "Line Coverage: ${LINE_COVERAGE_PERCENT}%"
          echo "Instruction Coverage: ${INSTRUCTION_COVERAGE_PERCENT}%"
          echo "Class Coverage: ${CLASS_COVERAGE_PERCENT}%"
          echo "Branch Coverage: ${BRANCH_COVERAGE_PERCENT}%"

          # Set the coverage percentages as environment variables
          echo "LINE_COVERAGE_PERCENT=${LINE_COVERAGE_PERCENT}" >> $GITHUB_ENV
          echo "INSTRUCTION_COVERAGE_PERCENT=${INSTRUCTION_COVERAGE_PERCENT}" >> $GITHUB_ENV
          echo "CLASS_COVERAGE_PERCENT=${CLASS_COVERAGE_PERCENT}" >> $GITHUB_ENV
          echo "BRANCH_COVERAGE_PERCENT=${BRANCH_COVERAGE_PERCENT}" >> $GITHUB_ENV

          # Check if coverage is below the threshold
          if [ "$LINE_COVERAGE_PERCENT" -lt 80 ] || [ "$INSTRUCTION_COVERAGE_PERCENT" -lt 80 ] || [ "$CLASS_COVERAGE_PERCENT" -lt 80 ] || [ "$BRANCH_COVERAGE_PERCENT" -lt 80 ]; then
            echo "❌ Coverage below required 80% threshold"
            echo "Skipping merge"
          fi

      # Step 5: Upload coverage report
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: build/reports/jacoco/test/html/

      # Step 6: Deploy to GitHub Pages (deploy coverage report)
      - name: Deploy JaCoCo HTML report to GitHub Pages
        if: success() # Only deploy if previous step succeeded
        run: |
          git clone --branch gh-pages https://github.com/${{ github.repository }}.git gh-pages
          cp -r build/reports/jacoco/test/html/* gh-pages/
          cd gh-pages
          git add .
          git commit -m "Update coverage report"
          git push origin gh-pages

      # Step 7: Comment on PR with coverage details
      - name: Comment on PR with coverage report
        uses: actions/github-script@v7
        with:
          script: |
            const lineCoverage = process.env.LINE_COVERAGE_PERCENT;
            const instructionCoverage = process.env.INSTRUCTION_COVERAGE_PERCENT;
            const classCoverage = process.env.CLASS_COVERAGE_PERCENT;
            const branchCoverage = process.env.BRANCH_COVERAGE_PERCENT;
            const coverageUrl = `https://mohamedshemees.github.io//Data-structure-Algorithms/`; // GitHub Pages URL

            const comment = `
            ## JaCoCo Test Coverage Report
            | Metric              | Covered | Missed | Coverage % |
            |---------------------|---------|--------|------------|
            | Line Coverage       | ${lineCoverage} | ${100 - lineCoverage} | ${lineCoverage}% |
            | Instruction Coverage| ${instructionCoverage} | ${100 - instructionCoverage} | ${instructionCoverage}% |
            | Class Coverage      | ${classCoverage} | ${100 - classCoverage} | ${classCoverage}% |
            | Branch Coverage     | ${branchCoverage} | ${100 - branchCoverage} | ${branchCoverage}% |

            ${lineCoverage >= 80 && instructionCoverage >= 80 && classCoverage >= 80 && branchCoverage >= 80 
              ? '✅ Coverage meets or exceeds the required 80% threshold. Great job!'
              : '❌ Coverage is below the required 80% threshold. Please add more tests to improve coverage.'}

            📊 [View detailed coverage report](${coverageUrl})`;

            const result = await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });

            console.log('PR comment created: ', result.data.html_url);
