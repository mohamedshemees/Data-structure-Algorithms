---
name: Test Coverage Enforcement
on:
  pull_request:
    branches:
      - main
jobs:
  coverage-check:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Make gradlew executable
        run: chmod +x ./gradlew
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: temurin
      - name: Run coverage check
        run: |
          # Run the tests and generate reports
          ./gradlew clean test jacocoTestReport jacocoTestCoverageVerification

          # Check if the JaCoCo report exists
          REPORT_PATH="build/reports/jacoco/test/jacocoTestReport.xml"
          if [ ! -f "$REPORT_PATH" ]; then
            echo "‚ùå JaCoCo report not found at $REPORT_PATH"
            exit 1
          fi

          # Debug: Output the XML file content for inspection
          echo "Debug: JaCoCo report content"
          cat "$REPORT_PATH"

          # Extract coverage value from the report
          COVERAGE=$(awk -F'"' '
            /<counter type="LINE"/ {
              for (i=1; i<=NF; i++) {
                if ($i == "missed=") missed=$(i+1);
                if ($i == "covered=") covered=$(i+1);
              }
              if (covered + missed > 0) {
                printf "%d", (covered / (covered + missed) * 100)
                exit
              }
            }
            END {
              # Default to 0 if no valid data is found
              print "0"
            }' "$REPORT_PATH" | tr -d '\n')

          # Validate that the coverage value is numeric
          if ! [[ "$COVERAGE" =~ ^[0-9]+$ ]]; then
            echo "‚ö†Ô∏è Invalid coverage value: '$COVERAGE'"
            COVERAGE=0
          fi

          # Set the coverage percentage as an environment variable
          echo "COVERAGE_PERCENT=${COVERAGE}" >> $GITHUB_ENV

          # Display the total line coverage
          echo "Total line coverage: ${COVERAGE}%"

          # Fail if coverage is below the threshold of 80%
          if [ "$COVERAGE" -lt 80 ]; then
            echo "‚ùå Coverage below required 80% threshold"
            exit 1
          fi
      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: build/reports/jacoco/test/html/
      - name: Comment on PR with coverage
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: >
            const coverage = process.env.COVERAGE_PERCENT;

            const comment = `## JaCoCo Test Coverage Report

            Total Line Coverage: **${coverage}%**


            ${coverage >= 80 
              ? '‚úÖ Coverage meets or exceeds the required 80% threshold. Great job!'
              : '‚ùå Coverage is below the required 80% threshold. Please add more tests to improve coverage.'}

            üìä [View detailed coverage report](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})`;


            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
      - name: Post coverage comment
        if: always()
        uses: actions/github-script@v6
        env:
          COVERAGE: ${{ env.COVERAGE_PERCENT }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: >
            const message = `

            ## üìä Test Coverage: ${process.env.COVERAGE}%

            **Minimum Required:** 80%

            ${process.env.COVERAGE < 80 ? '‚ùå **Merge blocked**' : '‚úÖ **Ready to merge**'}

            `;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });
