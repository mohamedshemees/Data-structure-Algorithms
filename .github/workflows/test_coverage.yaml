name: Test Coverage Enforcement

on:
  pull_request:
    branches:
      - main

jobs:
  coverage-check:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Make gradlew executable
      - name: Make gradlew executable
        run: chmod +x ./gradlew

      # Step 3: Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: temurin

      # Step 4: Install xmlstarlet (for XML parsing)
      - name: Install xmlstarlet
        run: sudo apt-get install xmlstarlet

      # Step 5: Run the tests and generate reports
      - name: Run coverage check
        id: coverage
        run: |
          # Run the tests and generate reports
          ./gradlew clean test jacocoTestReport jacocoTestCoverageVerification

          # Check if the JaCoCo report exists
          REPORT_PATH="build/reports/jacoco/test/jacocoTestReport.xml"
          if [ ! -f "$REPORT_PATH" ]; then
            echo "❌ JaCoCo report not found at $REPORT_PATH"
            exit 1
          fi

          # Parse the JaCoCo report with xmlstarlet and calculate coverage
          LINE_COVERAGE=$(xmlstarlet sel -t -v "sum(//counter[@type='LINE']/@covered) div sum(//counter[@type='LINE']/@covered + //counter[@type='LINE']/@missed) * 100" "$REPORT_PATH")
          CLASS_COVERAGE=$(xmlstarlet sel -t -v "sum(//counter[@type='CLASS']/@covered) div sum(//counter[@type='CLASS']/@covered + //counter[@type='CLASS']/@missed) * 100" "$REPORT_PATH")
          BRANCH_COVERAGE=$(xmlstarlet sel -t -v "sum(//counter[@type='BRANCH']/@covered) div sum(//counter[@type='BRANCH']/@covered + //counter[@type='BRANCH']/@missed) * 100" "$REPORT_PATH")

          # Output the coverage values
          echo "LINE_COVERAGE=$LINE_COVERAGE"
          echo "CLASS_COVERAGE=$CLASS_COVERAGE"
          echo "BRANCH_COVERAGE=$BRANCH_COVERAGE"

          # Set coverage as environment variables
          echo "LINE_COVERAGE=${LINE_COVERAGE}" >> $GITHUB_ENV
          echo "CLASS_COVERAGE=${CLASS_COVERAGE}" >> $GITHUB_ENV
          echo "BRANCH_COVERAGE=${BRANCH_COVERAGE}" >> $GITHUB_ENV

      # Step 6: Upload the coverage report as an artifact
      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: build/reports/jacoco/test/html/

      # Step 7: Check if any tests failed
      - name: Check if any tests failed
        id: test-results
        run: |
          # Get the number of failed tests from the test results
          FAILED_TESTS=$(grep -c 'FAIL' build/test-logs/test-results.xml)
          echo "Failed tests: $FAILED_TESTS"
          echo "FAILED_TESTS=$FAILED_TESTS" >> $GITHUB_ENV

      # Step 8: Comment on PR with coverage and test status
      - name: Comment on PR with coverage and test status
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const lineCoverage = process.env.LINE_COVERAGE;
            const classCoverage = process.env.CLASS_COVERAGE;
            const branchCoverage = process.env.BRANCH_COVERAGE;
            const failedTests = process.env.FAILED_TESTS;

            let comment = `## 📊 Test Coverage Report\n
            **Line Coverage**: ${lineCoverage}%\n
            **Class Coverage**: ${classCoverage}%\n
            **Branch Coverage**: ${branchCoverage}%\n
            **Minimum Required**: 80%\n`;

            // Append failed test message
            if (failedTests > 0) {
              comment += `\n❌ **${failedTests} test(s) failed**! Please review the failing tests.`;
            }

            if (lineCoverage >= 80 && classCoverage >= 80 && branchCoverage >= 80 && failedTests === 0) {
              comment += `\n✅ **Coverage and tests are good. Ready to merge!**`;
            } else {
              comment += `\n❌ **Coverage or tests are not sufficient. Merge blocked.**`;
            }

            // Append artifact link
            const artifactLink = `${{ steps.upload-coverage-report.outputs.artifact-url }}`
            comment += `\n🔽 [Download the coverage artifact](${artifactLink})`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
