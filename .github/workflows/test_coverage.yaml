name: Test and Coverage Check

on:
  pull_request:
    branches:
      - main
      - develop

jobs:
  test-and-coverage:
    name: Run tests and verify coverage
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: temurin

      - name: Run tests
        id: run_tests
        continue-on-error: true
        run: |
          ./gradlew clean test jacocoTestReport

      - name: Handle test failures
        if: steps.run_tests.outcome != 'success'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: "❌ **Tests failed. Please fix them before merging.**"
            });
            core.setFailed('Tests failed.')

      - name: Upload coverage report
        if: steps.run_tests.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            build/reports/jacoco/test/html/
            build/reports/jacoco/test/jacocoTestReport.xml

      - name: Install xmllint
        if: steps.run_tests.outcome == 'success'
        run: sudo apt-get install -y libxml2-utils

      - name: Check coverage
        if: steps.run_tests.outcome == 'success'
        id: check_coverage
        run: |
          REPORT_PATH="build/reports/jacoco/test/jacocoTestReport.xml"
          if [ ! -f "$REPORT_PATH" ]; then
            echo "❌ Coverage report not found."
            echo "coverage_found=false" >> $GITHUB_ENV
            exit 1
          fi

          extract_coverage() {
            local type=$1
            local covered=$(xmllint --xpath "string(//counter[@type='$type']/@covered)" "$REPORT_PATH")
            local missed=$(xmllint --xpath "string(//counter[@type='$type']/@missed)" "$REPORT_PATH")
            echo $(( (covered * 100) / (covered + missed) ))
          }

          INSTRUCTION_COVERAGE=$(extract_coverage "INSTRUCTION")
          LINE_COVERAGE=$(extract_coverage "LINE")
          METHOD_COVERAGE=$(extract_coverage "METHOD")
          CLASS_COVERAGE=$(extract_coverage "CLASS")

          echo "INSTRUCTION_COVERAGE=$INSTRUCTION_COVERAGE" >> $GITHUB_ENV
          echo "LINE_COVERAGE=$LINE_COVERAGE" >> $GITHUB_ENV
          echo "METHOD_COVERAGE=$METHOD_COVERAGE" >> $GITHUB_ENV
          echo "CLASS_COVERAGE=$CLASS_COVERAGE" >> $GITHUB_ENV

      - name: Comment coverage result
        if: steps.run_tests.outcome == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            const instruction = process.env.INSTRUCTION_COVERAGE;
            const line = process.env.LINE_COVERAGE;
            const method = process.env.METHOD_COVERAGE;
            const classCoverage = process.env.CLASS_COVERAGE;
            const artifactUrl = `https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}`;

            let message = `
            ## 📊 JaCoCo Coverage Report
            | Metric               | Covered % |
            |----------------------|-----------|
            | Instruction Coverage | ${instruction}% |
            | Line Coverage        | ${line}% |
            | Method Coverage      | ${method}% |
            | Class Coverage       | ${classCoverage}% |

            [🔗 View Detailed Coverage Report](${artifactUrl})
            `;

            if (
              instruction < 80 ||
              line < 80 ||
              method < 80 ||
              classCoverage < 80
            ) {
              message += '\n❌ **Coverage below 80%, please improve it before merging.**';
              core.setFailed('Coverage below 80%');
            } else {
              message += '\n✅ **Coverage meets minimum 80% requirement. Good job!**';
            }

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: message
            });
