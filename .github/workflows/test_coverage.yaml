name: Test Coverage Enforcement

on:
  pull_request:
    branches:
      - main

jobs:
  coverage-check:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Cache Gradle dependencies
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      # Step 3: Cache xmlstarlet
      - name: Cache xmlstarlet
        uses: actions/cache@v3
        with:
          path: /usr/local/bin/xmlstarlet
          key: xmlstarlet-${{ runner.os }}
          restore-keys: |
            xmlstarlet-${{ runner.os }}-

      # Step 4: Install xmlstarlet if not found
      - name: Install xmlstarlet if not present
        run: |
          if ! command -v xmlstarlet &> /dev/null; then
            echo "xmlstarlet not found, installing..."
            sudo apt-get install -y xmlstarlet
          fi

      # Step 5: Run tests and generate reports
      - name: Run coverage check
        id: coverage
        run: |
          # Run the tests and generate reports
          ./gradlew clean test jacocoTestReport jacocoTestCoverageVerification

          # Check if tests failed
          TEST_FAILED=$(grep -i "FAILURE" build/reports/tests/test/index.html)

          if [[ -n "$TEST_FAILED" ]]; then
            # Comment if there are test failures
            COMMENT="## Test Failures
There are failing tests in this run. Please check the logs and fix the issues. ❌"
            curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -d "{\"body\": \"$COMMENT\"}" \
              "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments"
            exit 1
          fi

          # If tests pass, proceed to check JaCoCo coverage
          REPORT_PATH="build/reports/jacoco/test/jacocoTestReport.xml"
          if [ ! -f "$REPORT_PATH" ]; then
            echo "❌ JaCoCo report not found at $REPORT_PATH"
            exit 1
          fi

          # Extract coverage values (Line, Class, Branch)
          COVERAGE_LINE=$(xmlstarlet sel -t -m "//counter[@type='LINE']" -v "@covered" "$REPORT_PATH")
          COVERAGE_CLASS=$(xmlstarlet sel -t -m "//counter[@type='CLASS']" -v "@covered" "$REPORT_PATH")
          COVERAGE_BRANCH=$(xmlstarlet sel -t -m "//counter[@type='BRANCH']" -v "@covered" "$REPORT_PATH")

          # Comment with coverage data in a neat table
          COMMENT="## JaCoCo Test Coverage Report

| Metric               | Percentage |
|----------------------|------------|
| **Line Coverage**     | **${COVERAGE_LINE}%**  |
| **Class Coverage**    | **${COVERAGE_CLASS}%** |
| **Branch Coverage**   | **${COVERAGE_BRANCH}%**|

✅ Coverage meets the required 80% threshold. Great job!"

          if [[ "$COVERAGE_LINE" -lt 80 ]]; then
            COMMENT="## JaCoCo Test Coverage Report

| Metric               | Percentage |
|----------------------|------------|
| **Line Coverage**     | **${COVERAGE_LINE}%**  |
| **Class Coverage**    | **${COVERAGE_CLASS}%** |
| **Branch Coverage**   | **${COVERAGE_BRANCH}%**|

❌ Coverage below 80%. Please add more tests or improve coverage."

          fi

          # Create a comment on PR
          curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -d "{\"body\": \"$COMMENT\"}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments"

      # Step 6: Upload coverage report (if needed)
      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: build/reports/jacoco/test/html/
