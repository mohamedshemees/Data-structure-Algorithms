name: Test Coverage trial

on:
  pull_request:
    branches:
      - main
      - develop

jobs:
  test_coverage:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'

      - name: Cache Gradle dependencies
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/*.java') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Install dependencies
        run: ./gradlew clean build --no-daemon

      - name: Run the tests and generate reports
        run: ./gradlew clean test jacocoTestReport

      - name: Check if JaCoCo coverage is below 80%
        run: |
          # Ensure XMLLint is installed
          sudo apt-get update
          sudo apt-get install -y xmlstarlet

          # Parse JaCoCo report for coverage percentages
          REPORT_PATH="build/reports/jacoco/test/jacocoTestReport.xml"
          
          if [ -f "$REPORT_PATH" ]; then
            LINE_COVERAGE=$(xmlstarlet sel -t -m "//counter[@type='LINE']" -v "@coveredRatio" "$REPORT_PATH")
            if (( $(echo "$LINE_COVERAGE < 0.8" | bc -l) )); then
              echo "❌ Coverage below 80%. Tests did not meet the required coverage."
              echo "coverage_check_failed=true" >> $GITHUB_ENV
            else
              echo "✅ Coverage is above 80%. Tests passed with sufficient coverage."
            fi
          else
            echo "Coverage report file not found!"
            echo "coverage_check_failed=true" >> $GITHUB_ENV
          fi

      - name: Add comment to PR if coverage is below threshold
        if: env.coverage_check_failed == 'true'
        run: |
          COMMENT="❌ Coverage is below 80%. Please add more tests to improve coverage."
          gh pr comment ${{ github.event.pull_request.number }} --body "$COMMENT"

      - name: Fail the job if coverage is below threshold
        if: env.coverage_check_failed == 'true'
        run: |
          echo "Stopping the merge because coverage is insufficient."
          exit 1
